---
- name: Set up Kubernetes cluster on Ubuntu 20.04 using kubeadm
  hosts: all
  remote_user: kubeuser
  become: yes
  become_method: sudo
  gather_facts: yes
  tasks: 
    - name: Configure sysctl (modify kernel parameters at runtime)
      shell: |
        modprobe overlay
        modprobe br_netfilter
        tee /etc/sysctl.d/kubernetes.conf<<EOF
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF
        sudo sysctl --system  

    - name: Create required directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /etc/docker
        - /etc/systemd/system/docker.service.d
    - name: Create daemon json config file
      shell: |
        tee /etc/docker/daemon.json <<EOF
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2",
          "storage-opts": [
            "overlay2.override_kernel_check=true"
          ]
        }
        EOF

    - name: Install docker
      apt:
        name: docker.io
        state: present
        update_cache: true

    - name: install APT Transport HTTPS
      apt:
       name: apt-transport-https
       state: present

    - name: Start and enable Services
      systemd:
        name: docker 
        enabled: yes
        state: restarted

    - name: add Kubernetes apt-key
      apt_key:
       url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
       state: present        

    - name: add Kubernetes' APT repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: 'kubernetes'

    - name: install kubelet
      apt:
       name: kubelet=1.23.5-00
       state: present
       update_cache: true   

    - name: install kubeadm
      apt:
       name: kubeadm=1.23.5-00
       state: present             


- name: Install kubectl and initialize kubeadm on master
  remote_user: kubeuser
  hosts: k8control
  gather_facts: yes
  tasks:
    - name: Make sure that the br_netfilter module is loaded
      shell: |
        lsmod | grep br_netfilter
      register: lsmod_output
    - debug:
        var: lsmod_output.stdout_lines

    - name: install kubectl
      apt:
       name: kubectl=1.23.5-00
       state: present
       allow_downgrade: yes        
   
    - name: Enable kubelet service
      systemd:
        name: kubelet.service
        state: started
        enabled: yes

    - name: Setup control plane 
      shell: |
        kubeadm init --apiserver-advertise-address="{{ ansible_ens33.ipv4.address }}" \
                     --apiserver-cert-extra-sans="{{ ansible_ens33.ipv4.address }}" \
                     --pod-network-cidr=192.168.0.0/24 \
                     --node-name "{{ ansible_hostname }}" \
                     
      register: kubeadm_output
    - debug:
        var: kubeadm_output.stdout_lines

    - name: Create .kube directory on master
      file:
        path: /home/kubeuser/.kube
        state: directory
        mode: '0755'
        owner: kubeuser

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/kubeuser/.kube/config
        remote_src: yes
        owner: kubeuser

    - name: Change kubeconfig file permissions
      file:
        path: /home/kubeuser/.kube/config 
        owner: kubeuser
        group: wheel

    - name: Install Calico network plugin
      become: no
      shell: |
        kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join_command output to file
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: /home/kubeuser/join-command 

    - name: Copy join_command file to localhost
      fetch:
        src: /home/kubeuser/join-command
        dest: /home/george/github/private/homelab/kubeadm-local-install/ubuntu-kube-install/
        flat: yes

- name: Join the nodes to the Kubernetes cluster
  remote_user: kubeuser
  hosts: workers
  gather_facts: yes
  tasks:
    - name: Restart kubelet service
      become: yes
      become_method: sudo
      systemd:
        state: restarted
        name: kubelet.service
        

    - name: Copy the join command to nodes  
      copy: 
        src: ./join-command 
        dest: /tmp/join-command.sh 
        mode: 0777

    - name: Join the node to cluster
      become: yes
      become_method: sudo
      command: sh /tmp/join-command.sh

